---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/2/6 20:16
---

local lexer = require "lexer"
local table_insert = table.insert

local TOKEN_TYPE = require "token_type"


local _M = {
}
local mt = { __index = _M }


local function parser_variable()
    lexer:next_token_is(TOKEN_TYPE.VAR_PREFIX)

    local next_token_line_num, next_token = lexer:next_token_is(TOKEN_TYPE.NAME)
    return next_token
end

local function parse_print()
    lexer:next_token_is(TOKEN_TYPE.PRINT)

    lexer:next_token_is(TOKEN_TYPE.LEFT_PAREN)

    lexer:look_ahead_and_skip(TOKEN_TYPE.EOF)

    local variable_name = parser_variable()

    lexer:look_ahead_and_skip(TOKEN_TYPE.EOF)

    lexer:next_token_is(TOKEN_TYPE.RIGHT_PAREN)

    lexer:look_ahead_and_skip(TOKEN_TYPE.EOF)

    return {["type"] = "print", ["variable_name"] = variable_name}
end

local function parser_assignment()

    local variable_name = parser_variable()

    lexer:look_ahead_and_skip(TOKEN_TYPE.EOF)

    lexer:next_token_is(TOKEN_TYPE.EQUAL)

    lexer:look_ahead_and_skip(TOKEN_TYPE.EOF)

    lexer:next_token_is(TOKEN_TYPE.QUOTE)

    local value = lexer:scan_before_token()

    lexer:next_token_is(TOKEN_TYPE.QUOTE)

    lexer:look_ahead_and_skip(TOKEN_TYPE.EOF)

    return {["type"] = "assignment", ["variable_name"] = variable_name, ["value"] = value}
end


local function parser_statement()
    local next_token = lexer:look_ahead()
    if next_token == TOKEN_TYPE.PRINT then
        return parse_print()
    elseif next_token == TOKEN_TYPE.VAR_PREFIX then
        return parser_assignment()
    else
        error("parser_statement failed: unknown statement")
    end
end


local function parser_statements()
    local statements = {}
    while lexer:look_ahead() ~= TOKEN_TYPE.EOF do
        local statement = parser_statement()
        table_insert(statements, statement)
    end
    return statements
end

function _M.parse(source_code)
    lexer = lexer.new(source_code)
    return parser_statements()
end

return _M